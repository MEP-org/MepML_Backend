# Generated by Django 4.1.7 on 2023-05-07 19:35

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Class",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=50)),
                ("image", models.ImageField(blank=True, upload_to="classes_images/")),
            ],
            options={
                "verbose_name_plural": "Classes",
            },
        ),
        migrations.CreateModel(
            name="Dataset",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("train_name", models.CharField(max_length=30)),
                ("train_dataset", models.FileField(upload_to="datasets/train/")),
                ("train_upload_date", models.DateTimeField(auto_now_add=True)),
                ("train_size", models.IntegerField()),
                ("test_name", models.CharField(max_length=30)),
                ("test_dataset", models.FileField(upload_to="datasets/test/")),
                ("test_upload_date", models.DateTimeField(auto_now_add=True)),
                ("test_size", models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name="Exercise",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("title", models.CharField(max_length=30)),
                ("subtitle", models.CharField(max_length=30)),
                ("description", models.CharField(max_length=100)),
                ("evaluation", models.CharField(max_length=100)),
                ("publish_date", models.DateTimeField(auto_now_add=True)),
                ("deadline", models.DateTimeField()),
                ("limit_of_attempts", models.SmallIntegerField()),
                ("visibility", models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name="Metric",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("title", models.CharField(max_length=20)),
                ("description", models.CharField(blank=True, max_length=300)),
                ("metric_file", models.FileField(upload_to="metrics/")),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                ("email", models.EmailField(max_length=50, unique=True)),
                ("nmec", models.IntegerField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=50)),
                ("is_staff", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Student",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Result",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("score", models.FloatField()),
                ("date", models.DateTimeField(auto_now_add=True)),
                (
                    "exercise",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="MepML.exercise"
                    ),
                ),
                (
                    "metric",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="MepML.metric"
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="MepML.student"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Professor",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="metric",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="MepML.professor",
            ),
        ),
        migrations.AddField(
            model_name="exercise",
            name="created_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="MepML.professor"
            ),
        ),
        migrations.AddField(
            model_name="exercise",
            name="dataset",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="MepML.dataset"
            ),
        ),
        migrations.AddField(
            model_name="exercise",
            name="metrics",
            field=models.ManyToManyField(to="MepML.metric"),
        ),
        migrations.AddField(
            model_name="exercise",
            name="students_class",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.CASCADE, to="MepML.class"
            ),
        ),
        migrations.CreateModel(
            name="CodeSubmission",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("file_name_result", models.CharField(max_length=30)),
                ("result_submission", models.FileField(upload_to="results/")),
                ("result_submission_date", models.DateTimeField(auto_now_add=True)),
                ("code_submission", models.FileField(upload_to="code_submissions/")),
                ("file_name_code", models.CharField(max_length=30)),
                ("code_submission_date", models.DateTimeField(auto_now_add=True)),
                (
                    "exercise",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="MepML.exercise"
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="MepML.student"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="class",
            name="created_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="MepML.professor"
            ),
        ),
        migrations.AddField(
            model_name="class",
            name="students",
            field=models.ManyToManyField(blank=True, to="MepML.student"),
        ),
    ]
